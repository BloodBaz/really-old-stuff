
;==============================================================
; WLA-DX banking setup
;==============================================================
.memorymap
	defaultslot     0
	; rom area
	slotsize        $4000
	slot            0       $0000
	slot            1       $4000
	slot            2       $8000
	; ram area
	slotsize        $2000
	slot            3       $C000
	slot            4       $E000
.endme

.rombankmap
	bankstotal 2
	banksize $4000
	banks 2
.endro

;==============================================================
; SDSC tag and SMS rom header
;==============================================================
.sdsctag 0.02,"DataStorm","Generated by zxb2wla 0.04 alpha","Haroldo de Oliveira Pinheiro"
.smstag


.include "..\lib\wla\boot.inc"


;==============================================================
; Includes
;==============================================================
.include "..\lib\wla\Useful functions.inc"
.include "..\lib\wla\BBC Micro font.inc"
.include "..\lib\wla\sprite.inc"
.include "..\lib\wla\resource.inc"



.section "ZX Basic code" free
zb__START_PROGRAM:
    ;#line 106
		ld a,%11100110
		out ($bf),a
		ld a,$81
		out ($bf),a
;#line 110
	ld a, 128
	ld (zb_playerX), a
	ld a, 16
	ld (zb_playerY), a
	xor a
	ld (zb_playerCurrentLane), a
	xor a
	ld (zb_playerTargetLane), a
	xor a
	push af
	ld a, 16
	push af
	ld hl, 0
	call zb_ResourceAddr
	call zb_LoadPalette
	ld a, 16
	push af
	ld a, 16
	push af
	ld hl, 0
	call zb_ResourceAddr
	call zb_LoadPalette
	ld a, 4
	push af
	ld hl, 256
	push hl
	ld hl, 3
	call zb_ResourceAddr
	push hl
	ld hl, 0
	call zb_LoadTiles
	call zb_DrawLanes
	call zb_InitEnemies
	call zb_InitShots
zb__LABEL0:
	call zb_ReadJoypad1
	ld (zb_joy), a
	push af
	ld h, 4
	pop af
	and h
	or a
	jp z, zb__LABEL2
	ld a, 1
	ld (zb_playerLookingLeft), a
	jp zb__LABEL3
zb__LABEL2:
	ld a, (zb_joy)
	push af
	ld h, 8
	pop af
	and h
	or a
	jp z, zb__LABEL5
	xor a
	ld (zb_playerLookingLeft), a
zb__LABEL5:
zb__LABEL3:
	ld a, (zb_playerCurrentLane)
	push af
	ld a, (zb_playerTargetLane)
	ld h, a
	pop af
	sub h
	sub 1
	jp nc, zb__LABEL6
	ld a, (zb_joy)
	push af
	ld h, 1
	pop af
	and h
	push af
	ld a, (zb_playerCurrentLane)
	push af
	xor a
	pop hl
	cp h
	sbc a, a
	ld h, a
	pop af
	call zb__AND8
	or a
	jp z, zb__LABEL8
	ld a, (zb_playerTargetLane)
	dec a
	ld (zb_playerTargetLane), a
	call zb_ChangeLane
	jp zb__LABEL9
zb__LABEL8:
	ld a, (zb_joy)
	push af
	ld h, 2
	pop af
	and h
	push af
	ld a, (zb_playerCurrentLane)
	push af
	ld h, 6
	pop af
	cp h
	sbc a, a
	ld h, a
	pop af
	call zb__AND8
	or a
	jp z, zb__LABEL11
	ld a, (zb_playerTargetLane)
	inc a
	ld (zb_playerTargetLane), a
	call zb_ChangeLane
zb__LABEL11:
zb__LABEL9:
	jp zb__LABEL7
zb__LABEL6:
	ld a, (zb_playerY)
	push af
	ld a, (zb_playerTargetY)
	ld h, a
	pop af
	sub h
	or a
	jp z, zb__LABEL12
	ld a, (zb_playerY)
	push af
	ld a, (zb_playerTargetY)
	ld h, a
	pop af
	cp h
	jp nc, zb__LABEL14
	ld a, (zb_playerY)
	add a, 12
	ld (zb_playerY), a
	jp zb__LABEL15
zb__LABEL14:
	ld a, (zb_playerY)
	sub 12
	ld (zb_playerY), a
zb__LABEL15:
	jp zb__LABEL13
zb__LABEL12:
	ld a, (zb_playerTargetLane)
	ld (zb_playerCurrentLane), a
zb__LABEL13:
zb__LABEL7:
	call zb_Fire
	ld a, (zb_playerFireDelay)
	or a
	jp z, zb__LABEL17
	ld a, (zb_playerFireDelay)
	dec a
	ld (zb_playerFireDelay), a
zb__LABEL17:
	call zb_MoveShots
	call zb_MoveEnemies
	call zb_ResetSprites
	call zb_DrawPlayerShip
	call zb_DrawShots
	call zb_DrawEnemies
	call zb_FinishSprites
	call zb_WaitForVBlankNoInt
	call zb_UpdateSprites
	ld hl, (zb_frameTimer)
	inc hl
	ld (zb_frameTimer), hl
	jp zb__LABEL0
zb__LABEL1:
;#line 462
LaneCoords:
		.db 0*24, 1*24, 2*24, 3*24, 4*24, 5*24, 6*24
;#line 464
zb_UpdateSprites:
;#line 1
		jp UpdateSprites
;#line 2
zb_UpdateSprites__leave:
	ret
zb_WaitForVBlankNoInt:
;#line 8
		jp WaitForVBlankNoInt
;#line 9
zb_WaitForVBlankNoInt__leave:
	ret
zb_SetSprite:
;#line 15
		exx
		pop hl
		exx
		ld d, 0
		ld e, a
		pop bc
		ld hl, hw_sprites_y
		add hl, de
		pop af
		ld (hl), a
		ld hl, hw_sprites_xc
		add hl, de
		add hl, de
		ld (hl), b
		inc hl
		pop af
		ld (hl), a
		exx
		push hl
		exx
;#line 35
zb_SetSprite__leave:
	ret
zb_ReadJoypad1:
;#line 52
		in	a, ($dc)
		cpl
;#line 54
zb_ReadJoypad1__leave:
	ret
zb_ReadJoypad2:
;#line 59
		in	a, ($dc)
		cpl
		rla
		rla
		rla
		and	$03
		ld	l, a
		in	a, ($dd)
		cpl
		add	a, a
		add	a, a
		or	l
;#line 71
zb_ReadJoypad2__leave:
	ret
zb_AndW:
;#line 76
		pop bc
		pop de
		ld a, l
		and e
		ld l, a
		ld a, h
		and d
		ld h, a
		push bc
;#line 85
zb_AndW__leave:
	ret
zb_ResourceAddr:
;#line 95
		ld de, resource_pointer_table
		add hl, de
		ld a, (hl)
		ld de, $FFFF
		ld (de), a
		inc hl
		ld e, (hl)
		inc hl
		ld d, (hl)
		ld l, e
		ld a, d
		and $3f
		or $80
		ld h, a
;#line 109
zb_ResourceAddr__leave:
	ret
zb_LoadPalette:
;#line 119
		exx
		pop hl
		exx
		pop bc
		pop de
		ld c, d
		call LoadPalette
		exx
		push hl
		exx
;#line 129
zb_LoadPalette__leave:
	ret
zb_LoadTiles:
;#line 137
		exx
		pop hl
		exx
		pop ix
		pop bc
		pop de
		call LoadTiles
		exx
		push hl
		exx
;#line 147
zb_LoadTiles__leave:
	ret
zb_SetBkgData:
;#line 156
		exx
		pop hl
		exx
		pop bc
		ld e, b
		pop bc
		ld d, b
		pop bc
		ld a, b
		pop bc
		ld c, a
		push	hl
		ld	l, d
		ld	h, 0
		add	hl, hl
		add	hl, hl
		add	hl, hl
		add	hl, hl
		add	hl, hl
		ld	d, 0
		add	hl, de
		add	hl, hl
		ld	de, NameTableAddress
		add	hl, de
		ld	d, h
		ld	e, l
		pop	hl
zb__SetBkgData__lineLoop:
		push	bc
		push	hl
		ld	h, d
		ld	l, e
		call	VRAMToHL
		pop	hl
		push	af
zb__SetBkgData__colLoop:
		ld	a, (hl)
		out	 ($be), a
		inc	hl
		ld	a, (hl)
		out	 ($be), a
		inc	hl
		dec	c
		jp	nz, zb__SetBkgData__colLoop
		pop	af
		pop	bc
		ld	a, e
		add	a, 64
		jp	nc, zb__SetBkgData__notCarry
		inc	d
zb__SetBkgData__notCarry:
		ld	e, a
		dec	b
		jp	nz, zb__SetBkgData__lineLoop
		exx
		push hl
		exx
;#line 213
zb_SetBkgData__leave:
	ret
zb_ScrollY:
;#line 235
		out	 ($bf),a
		ld	a,$89
		out	 ($bf),a
;#line 238
zb_ScrollY__leave:
	ret
zb_ResetSprites:
	xor a
	ld (zb_currentSprite), a
zb_ResetSprites__leave:
	ret
zb_AddSprite:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+9)
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	push af
	ld a, (zb_currentSprite)
	call zb_SetSprite
	ld a, (zb_currentSprite)
	inc a
	ld (zb_currentSprite), a
zb_AddSprite__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
zb_AddDoubleSprite:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+9)
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	sub 8
	push af
	call zb_AddSprite
	ld a, (ix+9)
	add a, 2
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	push af
	call zb_AddSprite
zb_AddDoubleSprite__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
zb_FinishSprites:
	push ix
	ld ix, 0
	add ix, sp
	xor a
	push af
	ld a, 208
	push af
	xor a
	push af
	ld a, (zb_currentSprite)
	call zb_SetSprite
zb_FinishSprites__leave:
	ld sp, ix
	pop ix
	ret
zb_Random:
;#line 6
		ld	hl, (zb_randomSeed)
		ld	d, h
		ld	e, l
		ld	a, d
		ld	h, e
		ld	l, 253
		or	a
		sbc	hl, de
		sbc	a, 0
		sbc	hl, de
		ld	d, 0
		sbc	a, d
		ld	e, a
		sbc	hl, de
		jr	nc, Random_2
		inc	hl
Random_2:
		ld	 (zb_randomSeed), hl
		ret
;#line 25
zb_Random__leave:
	ret
zb_DrawShip:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, (zb_frameTimer)
	push hl
	ld de, 16
	pop hl
	call zb__BAND16
	ld a, h
	or l
	jp z, zb__LABEL19
	ld a, (ix+9)
	add a, 4
	ld (ix+9), a
zb__LABEL19:
	ld a, (ix+11)
	or a
	jp z, zb__LABEL21
	ld a, (ix+9)
	add a, 8
	ld (ix+9), a
zb__LABEL21:
	ld a, (ix+9)
	push af
	ld a, (ix+7)
	push af
	ld a, (ix+5)
	push af
	call zb_AddDoubleSprite
zb_DrawShip__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	pop bc
	pop bc
	ex (sp), hl
	exx
	ret
zb_DrawPlayerShip:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (zb_playerLookingLeft)
	sub 1
	sbc a, a
	push af
	ld a, 16
	push af
	ld a, (zb_playerY)
	push af
	ld a, (zb_playerX)
	push af
	call zb_DrawShip
zb_DrawPlayerShip__leave:
	ld sp, ix
	pop ix
	ret
zb_DrawLanes:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -74
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 73
	ld d, h
	ld e, l
	inc de
	ldir
	push ix
	pop hl
	ld bc, -74
	add hl, bc
	ex de, hl
	ld hl, zb__LABEL108
	ld bc, 3
	ldir
	push ix
	pop hl
	ld de, -74
	add hl, de
	ld (ix-3), l
	ld (ix-2), h
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 62
	add hl, de
	ld (ix-5), l
	ld (ix-4), h
	ld (ix-1), 0
	jp zb__LABEL22
zb__LABEL26:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld hl, 176
	ex de, hl
	pop hl
	ld (hl), e
	inc hl
	ld (hl), d
	ld l, (ix-5)
	ld h, (ix-4)
	push hl
	ld hl, 176
	ex de, hl
	pop hl
	ld (hl), e
	inc hl
	ld (hl), d
	ld l, (ix-3)
	ld h, (ix-2)
	inc hl
	inc hl
	ld (ix-3), l
	ld (ix-2), h
	ld l, (ix-5)
	ld h, (ix-4)
	dec hl
	dec hl
	ld (ix-5), l
	ld (ix-4), h
zb__LABEL27:
	ld a, (ix-1)
	inc a
	ld (ix-1), a
zb__LABEL22:
	ld a, (ix-1)
	push af
	ld a, 4
	pop hl
	cp h
	jp nc, zb__LABEL26
zb__LABEL25:
	ld (ix-1), 4
	jp zb__LABEL28
zb__LABEL32:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld hl, 177
	ex de, hl
	pop hl
	ld (hl), e
	inc hl
	ld (hl), d
	ld l, (ix-5)
	ld h, (ix-4)
	push hl
	ld hl, 177
	ex de, hl
	pop hl
	ld (hl), e
	inc hl
	ld (hl), d
	ld l, (ix-3)
	ld h, (ix-2)
	inc hl
	inc hl
	ld (ix-3), l
	ld (ix-2), h
	ld l, (ix-5)
	ld h, (ix-4)
	dec hl
	dec hl
	ld (ix-5), l
	ld (ix-4), h
zb__LABEL33:
	ld a, (ix-1)
	inc a
	ld (ix-1), a
zb__LABEL28:
	ld a, (ix-1)
	push af
	ld a, 8
	pop hl
	cp h
	jp nc, zb__LABEL32
zb__LABEL31:
	ld (ix-1), 9
	jp zb__LABEL34
zb__LABEL38:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	ld hl, 178
	ex de, hl
	pop hl
	ld (hl), e
	inc hl
	ld (hl), d
	ld l, (ix-5)
	ld h, (ix-4)
	push hl
	ld hl, 178
	ex de, hl
	pop hl
	ld (hl), e
	inc hl
	ld (hl), d
	ld l, (ix-3)
	ld h, (ix-2)
	inc hl
	inc hl
	ld (ix-3), l
	ld (ix-2), h
	ld l, (ix-5)
	ld h, (ix-4)
	dec hl
	dec hl
	ld (ix-5), l
	ld (ix-4), h
zb__LABEL39:
	ld a, (ix-1)
	inc a
	ld (ix-1), a
zb__LABEL34:
	ld a, (ix-1)
	push af
	ld a, 15
	pop hl
	cp h
	jp nc, zb__LABEL38
zb__LABEL37:
	ld a, 1
	push af
	ld a, 32
	push af
	ld a, 1
	push af
	xor a
	push af
	push ix
	pop hl
	ld de, -74
	add hl, de
	call zb_SetBkgData
	ld a, 1
	push af
	ld a, 32
	push af
	ld a, 22
	push af
	xor a
	push af
	push ix
	pop hl
	ld de, -74
	add hl, de
	call zb_SetBkgData
	push ix
	pop hl
	ld de, -74
	add hl, de
	ld de, 28
	add hl, de
	push hl
	ld hl, 179
	ex de, hl
	pop hl
	ld (hl), e
	inc hl
	ld (hl), d
	push ix
	pop hl
	ld de, -74
	add hl, de
	ld de, 30
	add hl, de
	push hl
	ld hl, 0
	ex de, hl
	pop hl
	ld (hl), e
	inc hl
	ld (hl), d
	push ix
	pop hl
	ld de, -74
	add hl, de
	ld de, 32
	add hl, de
	push hl
	ld hl, 0
	ex de, hl
	pop hl
	ld (hl), e
	inc hl
	ld (hl), d
	push ix
	pop hl
	ld de, -74
	add hl, de
	ld de, 34
	add hl, de
	push hl
	ld hl, 180
	ex de, hl
	pop hl
	ld (hl), e
	inc hl
	ld (hl), d
	ld (ix-7), 4
	ld (ix-6), 0
	ld (ix-1), 2
	jp zb__LABEL40
zb__LABEL44:
	ld a, 1
	push af
	ld a, 32
	push af
	ld l, (ix-7)
	ld h, (ix-6)
	ld a, l
	push af
	xor a
	push af
	push ix
	pop hl
	ld de, -74
	add hl, de
	call zb_SetBkgData
	ld l, (ix-7)
	ld h, (ix-6)
	inc hl
	inc hl
	inc hl
	ld (ix-7), l
	ld (ix-6), h
zb__LABEL45:
	ld a, (ix-1)
	inc a
	ld (ix-1), a
zb__LABEL40:
	ld a, (ix-1)
	push af
	ld a, 7
	pop hl
	cp h
	jp nc, zb__LABEL44
zb__LABEL43:
zb_DrawLanes__leave:
	ld sp, ix
	pop ix
	ret
zb_LaneCoord:
;#line 185
		ld de, LaneCoords
		add hl, de
		ld a, (hl)
;#line 188
zb_LaneCoord__leave:
	ret
zb_ChangeLane:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (zb_playerTargetLane)
	ld l, a
	ld h, 0
	call zb_LaneCoord
	add a, 16
	ld (zb_playerTargetY), a
zb_ChangeLane__leave:
	ld sp, ix
	pop ix
	ret
zb_InitShots:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld hl, zb_shots
	ld (ix-3), l
	ld (ix-2), h
	ld (ix-1), 0
	jp zb__LABEL46
zb__LABEL50:
	ld l, (ix-3)
	ld h, (ix-2)
	inc hl
	push hl
	xor a
	pop hl
	ld (hl), a
zb__LABEL51:
	ld a, (ix-1)
	inc a
	ld (ix-1), a
zb__LABEL46:
	ld a, (ix-1)
	push af
	ld a, 6
	pop hl
	cp h
	jp nc, zb__LABEL50
zb__LABEL49:
zb_InitShots__leave:
	ld sp, ix
	pop ix
	ret
zb_ShotAddr:
	push ix
	ld ix, 0
	add ix, sp
	ld a, (ix+5)
	add a, a
	ld l, a
	ld h, 0
	ex de, hl
	ld hl, zb_shots
	add hl, de
	jp zb_ShotAddr__leave
zb_ShotAddr__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
zb_DrawShot:
	push ix
	ld ix, 0
	add ix, sp
	ld l, (ix+4)
	ld h, (ix+5)
	inc hl
	ld b, h
	ld c, l
	ld a, (bc)
	or a
	jp z, zb__LABEL53
	ld l, (ix+4)
	ld h, (ix+5)
	inc hl
	ld b, h
	ld c, l
	ld a, (bc)
	sub 2
	sub 1
	sbc a, a
	push af
	ld a, 32
	push af
	ld a, (ix+7)
	push af
	ld l, (ix+4)
	ld h, (ix+5)
	ld b, h
	ld c, l
	ld a, (bc)
	push af
	call zb_DrawShip
zb__LABEL53:
zb_DrawShot__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
zb_DrawShots:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	ld hl, zb_shots
	ld (ix-4), l
	ld (ix-3), h
	ld (ix-2), 16
	ld (ix-1), 1
	jp zb__LABEL54
zb__LABEL58:
	ld a, (ix-2)
	push af
	ld l, (ix-4)
	ld h, (ix-3)
	push hl
	call zb_DrawShot
	ld a, (ix-2)
	add a, 24
	ld (ix-2), a
	ld l, (ix-4)
	ld h, (ix-3)
	inc hl
	inc hl
	ld (ix-4), l
	ld (ix-3), h
zb__LABEL59:
	ld a, (ix-1)
	inc a
	ld (ix-1), a
zb__LABEL54:
	ld a, (ix-1)
	push af
	ld a, 7
	pop hl
	cp h
	jp nc, zb__LABEL58
zb__LABEL57:
zb_DrawShots__leave:
	ld sp, ix
	pop ix
	ret
zb_MoveShot:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld l, (ix+4)
	ld h, (ix+5)
	ld b, h
	ld c, l
	ld a, (bc)
	ld (ix-1), a
	ld l, (ix+4)
	ld h, (ix+5)
	inc hl
	ld b, h
	ld c, l
	ld a, (bc)
	ld (ix-2), a
	or a
	jp z, zb__LABEL61
	ld a, (ix-2)
	dec a
	sub 1
	jp nc, zb__LABEL62
	ld a, (ix-1)
	sub 6
	ld (ix-1), a
	jp zb__LABEL63
zb__LABEL62:
	ld a, (ix-1)
	add a, 6
	ld (ix-1), a
zb__LABEL63:
	ld a, (ix-1)
	push af
	ld a, 8
	pop hl
	sub h
	ccf
	sbc a, a
	push af
	ld a, (ix-1)
	sub 248
	ccf
	sbc a, a
	ld h, a
	pop af
	or h
	or a
	jp z, zb__LABEL65
	ld l, (ix+4)
	ld h, (ix+5)
	inc hl
	push hl
	xor a
	pop hl
	ld (hl), a
zb__LABEL65:
	ld l, (ix+4)
	ld h, (ix+5)
	push hl
	ld a, (ix-1)
	pop hl
	ld (hl), a
zb__LABEL61:
zb_MoveShot__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	ex (sp), hl
	exx
	ret
zb_MoveShots:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld hl, zb_shots
	ld (ix-3), l
	ld (ix-2), h
	ld (ix-1), 1
	jp zb__LABEL66
zb__LABEL70:
	ld l, (ix-3)
	ld h, (ix-2)
	push hl
	call zb_MoveShot
	ld l, (ix-3)
	ld h, (ix-2)
	inc hl
	inc hl
	ld (ix-3), l
	ld (ix-2), h
zb__LABEL71:
	ld a, (ix-1)
	inc a
	ld (ix-1), a
zb__LABEL66:
	ld a, (ix-1)
	push af
	ld a, 7
	pop hl
	cp h
	jp nc, zb__LABEL70
zb__LABEL69:
zb_MoveShots__leave:
	ld sp, ix
	pop ix
	ret
zb_Fire:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	ld a, (zb_playerCurrentLane)
	push af
	call zb_ShotAddr
	ld (ix-2), l
	ld (ix-1), h
	ld l, (ix-2)
	ld h, (ix-1)
	inc hl
	ld b, h
	ld c, l
	ld a, (bc)
	sub 1
	jp nc, zb__LABEL73
	ld l, (ix-2)
	ld h, (ix-1)
	push hl
	ld a, 128
	pop hl
	ld (hl), a
	ld a, (zb_playerLookingLeft)
	or a
	jp z, zb__LABEL74
	ld l, (ix-2)
	ld h, (ix-1)
	inc hl
	push hl
	ld a, 1
	pop hl
	ld (hl), a
	jp zb__LABEL75
zb__LABEL74:
	ld l, (ix-2)
	ld h, (ix-1)
	inc hl
	push hl
	ld a, 2
	pop hl
	ld (hl), a
zb__LABEL75:
zb__LABEL73:
zb_Fire__leave:
	ld sp, ix
	pop ix
	ret
zb_InitEnemies:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	inc sp
	ld hl, zb_enemies
	ld (ix-3), l
	ld (ix-2), h
	ld (ix-1), 0
	jp zb__LABEL76
zb__LABEL80:
	ld l, (ix-3)
	ld h, (ix-2)
	inc hl
	push hl
	xor a
	pop hl
	ld (hl), a
	ld l, (ix-3)
	ld h, (ix-2)
	ld de, 4
	add hl, de
	ld (ix-3), l
	ld (ix-2), h
zb__LABEL81:
	ld a, (ix-1)
	inc a
	ld (ix-1), a
zb__LABEL76:
	ld a, (ix-1)
	push af
	ld a, 6
	pop hl
	cp h
	jp nc, zb__LABEL80
zb__LABEL79:
zb_InitEnemies__leave:
	ld sp, ix
	pop ix
	ret
zb_DrawEnemy:
	push ix
	ld ix, 0
	add ix, sp
	ld l, (ix+4)
	ld h, (ix+5)
	inc hl
	ld b, h
	ld c, l
	ld a, (bc)
	or a
	jp z, zb__LABEL83
	ld l, (ix+4)
	ld h, (ix+5)
	inc hl
	ld b, h
	ld c, l
	ld a, (bc)
	push af
	xor a
	pop hl
	sub h
	add a, a
	sbc a, a
	push af
	ld l, (ix+4)
	ld h, (ix+5)
	inc hl
	inc hl
	ld b, h
	ld c, l
	ld a, (bc)
	add a, a
	add a, a
	add a, a
	add a, a
	add a, 48
	push af
	ld a, (ix+7)
	push af
	ld l, (ix+4)
	ld h, (ix+5)
	ld b, h
	ld c, l
	ld a, (bc)
	push af
	call zb_DrawShip
zb__LABEL83:
zb_DrawEnemy__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
zb_DrawEnemies:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	ld hl, zb_enemies
	ld (ix-4), l
	ld (ix-3), h
	ld (ix-2), 16
	ld (ix-1), 0
	jp zb__LABEL84
zb__LABEL88:
	ld a, (ix-2)
	push af
	ld l, (ix-4)
	ld h, (ix-3)
	push hl
	call zb_DrawEnemy
	ld a, (ix-2)
	add a, 24
	ld (ix-2), a
	ld l, (ix-4)
	ld h, (ix-3)
	ld de, 4
	add hl, de
	ld (ix-4), l
	ld (ix-3), h
zb__LABEL89:
	ld a, (ix-1)
	inc a
	ld (ix-1), a
zb__LABEL84:
	ld a, (ix-1)
	push af
	ld a, 6
	pop hl
	cp h
	jp nc, zb__LABEL88
zb__LABEL87:
zb_DrawEnemies__leave:
	ld sp, ix
	pop ix
	ret
zb_CollideEnemy:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, 0
	push hl
	push hl
	push hl
	ld a, (ix+7)
	push af
	call zb_ShotAddr
	ld (ix-2), l
	ld (ix-1), h
	ld l, (ix-2)
	ld h, (ix-1)
	inc hl
	ld b, h
	ld c, l
	ld a, (bc)
	or a
	jp z, zb__LABEL91
	ld l, (ix-2)
	ld h, (ix-1)
	ld b, h
	ld c, l
	ld a, (bc)
	ld l, a
	ld h, 0
	ld (ix-4), l
	ld (ix-3), h
	ld l, (ix+4)
	ld h, (ix+5)
	ld b, h
	ld c, l
	ld a, (bc)
	ld l, a
	ld h, 0
	ld (ix-6), l
	ld (ix-5), h
	ld l, (ix-4)
	ld h, (ix-3)
	push hl
	ld l, (ix-6)
	ld h, (ix-5)
	ex de, hl
	pop hl
	or a
	sbc hl, de
	push hl
	ld hl, 16
	pop de
	or a
	sbc hl, de
	ccf
	sbc a, a
	push af
	ld l, (ix-6)
	ld h, (ix-5)
	push hl
	ld l, (ix-4)
	ld h, (ix-3)
	ex de, hl
	pop hl
	or a
	sbc hl, de
	push hl
	ld hl, 16
	pop de
	or a
	sbc hl, de
	ccf
	sbc a, a
	ld h, a
	pop af
	or h
	or a
	jp z, zb__LABEL93
	ld l, (ix-2)
	ld h, (ix-1)
	inc hl
	push hl
	xor a
	pop hl
	ld (hl), a
	ld l, (ix+4)
	ld h, (ix+5)
	inc hl
	push hl
	xor a
	pop hl
	ld (hl), a
zb__LABEL93:
zb__LABEL91:
zb_CollideEnemy__leave:
	ld sp, ix
	pop ix
	exx
	pop hl
	pop bc
	ex (sp), hl
	exx
	ret
zb_MoveEnemies:
	push ix
	ld ix, 0
	add ix, sp
	ld hl, -7
	add hl, sp
	ld sp, hl
	ld (hl), 0
	ld bc, 6
	ld d, h
	ld e, l
	inc de
	ldir
	ld hl, zb_enemies
	ld (ix-7), l
	ld (ix-6), h
	ld (ix-1), 0
	jp zb__LABEL94
zb__LABEL98:
	ld l, (ix-7)
	ld h, (ix-6)
	ld b, h
	ld c, l
	ld a, (bc)
	ld (ix-4), a
	ld l, (ix-7)
	ld h, (ix-6)
	inc hl
	ld b, h
	ld c, l
	ld a, (bc)
	ld (ix-5), a
	ld l, (ix-7)
	ld h, (ix-6)
	inc hl
	inc hl
	ld b, h
	ld c, l
	ld a, (bc)
	ld (ix-2), a
	ld l, (ix-7)
	ld h, (ix-6)
	inc hl
	inc hl
	inc hl
	ld b, h
	ld c, l
	ld a, (bc)
	ld (ix-3), a
	ld a, (ix-5)
	sub 1
	jp nc, zb__LABEL100
	call zb_Random
	push hl
	ld de, 31
	pop hl
	call zb__BAND16
	push hl
	ld de, 1
	pop hl
	call zb__EQ16
	or a
	jp z, zb__LABEL103
	call zb_Random
	push hl
	ld de, 1
	pop hl
	call zb__BAND16
	ld a, h
	or l
	jp z, zb__LABEL104
	ld (ix-4), 9
	call zb_Random
	push hl
	ld de, 15
	pop hl
	call zb__BAND16
	ld de, 8
	add hl, de
	ld a, l
	ld (ix-5), a
	jp zb__LABEL105
zb__LABEL104:
	ld (ix-4), 247
	call zb_Random
	push hl
	ld de, 15
	pop hl
	call zb__BAND16
	ld de, 8
	add hl, de
	call zb__NEGHL
	ld a, l
	ld (ix-5), a
zb__LABEL105:
	ld l, (ix-7)
	ld h, (ix-6)
	push hl
	ld a, (ix-4)
	pop hl
	ld (hl), a
	ld l, (ix-7)
	ld h, (ix-6)
	inc hl
	push hl
	ld a, (ix-5)
	pop hl
	ld (hl), a
	ld l, (ix-7)
	ld h, (ix-6)
	inc hl
	inc hl
	push hl
	call zb_Random
	push hl
	ld de, 7
	pop hl
	call zb__BAND16
	ld a, l
	pop hl
	ld (hl), a
zb__LABEL103:
	jp zb__LABEL101
zb__LABEL100:
	ld a, (ix-1)
	push af
	ld l, (ix-7)
	ld h, (ix-6)
	push hl
	call zb_CollideEnemy
	ld a, (ix-3)
	push af
	ld a, (ix-5)
	ld h, a
	pop af
	add a, h
	ld (ix-3), a
	ld a, (ix-4)
	push af
	ld a, (ix-3)
	ld b, 4
zb__LABEL109:
	sra a
	djnz zb__LABEL109
	ld h, a
	pop af
	add a, h
	ld (ix-4), a
	ld a, (ix-3)
	push af
	ld h, 15
	pop af
	and h
	ld (ix-3), a
	ld l, (ix-7)
	ld h, (ix-6)
	push hl
	ld a, (ix-4)
	pop hl
	ld (hl), a
	ld l, (ix-7)
	ld h, (ix-6)
	inc hl
	inc hl
	inc hl
	push hl
	ld a, (ix-3)
	pop hl
	ld (hl), a
	ld a, (ix-4)
	push af
	ld a, 8
	pop hl
	sub h
	ccf
	sbc a, a
	push af
	ld a, (ix-4)
	sub 248
	ccf
	sbc a, a
	ld h, a
	pop af
	or h
	or a
	jp z, zb__LABEL107
	ld l, (ix-7)
	ld h, (ix-6)
	inc hl
	push hl
	xor a
	pop hl
	ld (hl), a
zb__LABEL107:
	ld a, (ix-1)
	push af
	ld l, (ix-7)
	ld h, (ix-6)
	push hl
	call zb_CollideEnemy
zb__LABEL101:
	ld l, (ix-7)
	ld h, (ix-6)
	ld de, 4
	add hl, de
	ld (ix-7), l
	ld (ix-6), h
zb__LABEL99:
	ld a, (ix-1)
	inc a
	ld (ix-1), a
zb__LABEL94:
	ld a, (ix-1)
	push af
	ld a, 6
	pop hl
	cp h
	jp nc, zb__LABEL98
zb__LABEL97:
zb_MoveEnemies__leave:
	ld sp, ix
	pop ix
	ret
;#line 1 "neg16.asm"
	; Negates HL value (16 bit)
zb__ABS16:
		bit 7, h
		ret z

zb__NEGHL:
		ld a, l			; HL = -HL
		cpl
		ld l, a
		ld a, h
		cpl
		ld h, a
		inc hl
		ret

;#line 1638 "test.zxb"
;#line 1 "eq16.asm"
zb__EQ16:	; Test if 16bit values HL == DE
		; Returns result in A: 0 = False, FF = True
			or a	; Reset carry flag
			sbc hl, de

			ld a, h
			or l
			sub 1  ; sets carry flag only if a = 0
			sbc a, a

			ret

;#line 1639 "test.zxb"
;#line 1 "band16.asm"
; vim:ts=4:et:
	; FASTCALL bitwise and16 version.
	; result in hl
; zb__FASTCALL__ version (operands: A, H)
	; Performs 16bit or 16bit and returns the boolean
; Input: HL, DE
; Output: HL <- HL AND DE

zb__BAND16:
		ld a, h
		and d
	    ld h, a

	    ld a, l
	    and e
	    ld l, a

	    ret

;#line 1640 "test.zxb"
;#line 1 "and8.asm"
	; FASTCALL boolean and 8 version.
	; result in Accumulator (0 False, not 0 True)
; zb__FASTCALL__ version (operands: A, H)
	; Performs 8bit and 8bit and returns the boolean

zb__AND8:
		or a
		ret z
		ld a, h
		ret

;#line 1641 "test.zxb"

    ret
.ends

.section "ZXB variable init values" free
ZXBASIC_USER_DATA_VALUES:
    ; zb_randomSeed
	.db 00, 00
; zb_playerLookingLeft
	.db 00
; zb_playerTargetLane
	.db 00
; zb_playerFrame
	.db 00
; zb_playerFireDelay
	.db 00
; zb_joy
	.db 00
; zb_playerX
	.db 00
; zb_playerY
	.db 00
; zb_playerTargetY
	.db 00
; zb_playerCurrentLane
	.db 00
; zb_frameTimer
	.db 00, 00
; zb_currentSprite
	.db 00
; zb_shots
	.dw 0000h
	.db 01h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
; zb_enemies
	.dw 0000h
	.db 01h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
	.db 00h
; zb__LABEL108
	.db 00h
	.db 00h
	.db 02h    
ZXBASIC_USER_DATA_VALUES_END:
.ends


.ramsection "ZXBasic Variables" slot 3
ZXBASIC_USER_DATA ds 0
    	zb_randomSeed ds 2
	zb_playerLookingLeft ds 1
	zb_playerTargetLane ds 1
	zb_playerFrame ds 1
	zb_playerFireDelay ds 1
	zb_joy ds 1
	zb_playerX ds 1
	zb_playerY ds 1
	zb_playerTargetY ds 1
	zb_playerCurrentLane ds 1
	zb_frameTimer ds 2
	zb_currentSprite ds 1
	zb_shots ds 17
	zb_enemies ds 31
	zb__LABEL108 ds 3
ZXBASIC_USER_DATA_END ds 0    
.ends



.include "test.rsc.inc"
