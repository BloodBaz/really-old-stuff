#include "hardware.zxi"
#include "sprite.zxi"
#include "test.zxi"

const fixShift as Integer = 6
const fixScale as Integer = 1 << fixShift
const padMaxSpd as Integer = 8 * fixScale
const padIncSpd as Integer = fixScale
const ballMaxSpd as Integer = 8 * fixScale
const padPosY as Integer = 148
const maxX as Integer = 248 * fixScale
const maxY as Integer = 184 * fixScale
const padWidth as Integer = 6
const padMaxX as Integer = maxX - (padWidth - 1) * 8 * fixScale

dim padX, padSpdX as Integer
dim ballX, ballSpdX, ballY, ballSpdY as Integer
dim joy as UByte
dim buffer(0 to 5) as UByte
dim enemyBaseTile as UByte = 144


asm
here_please:
    ld a,%11100110
;          |||| |`- Zoomed sprites -> 16x16 pixels
;          |||| `-- Doubled sprites -> 2 tiles per sprite, 8x16
;          |||`---- 30 row/240 line mode
;          ||`----- 28 row/224 line mode
;          |`------ VBlank interrupts
;          `------- Enable display
    out ($bf),a
    ld a,$81
    out ($bf),a
end asm


sub DrawPlayerShip()
	dim x, y as UByte
	
	x = padX >> fixShift
	y = padPosY

	AddSprite(x, y, 128)
	x = x + 8
	AddSprite(x, y, 130)
	x = x - 8
	y = y + 16
	AddSprite(x, y, 132)
	x = x + 8
	AddSprite(x, y, 134)
end sub

sub fastcall SetBufferByte(index as UInteger, b as UByte)
	' Temporary workaround; arrays aren't working as they should.
	asm
		pop bc		; ret addr
		
		pop de
		ld a, d		; byte data
		
		ld de, zb_buffer
		add hl, de	; hl now points to dest addr
		
		ld (hl), a
		
		push bc 	; ret addr
	end asm
end sub

function fastcall GetBufferAddr() as UInteger
	asm
		ld hl, zb_buffer
	end asm
end function

sub DrawBlock(x as UByte, y as UByte, number as UByte)
	dim i, n as UByte	
	dim buffer(0 to 5) as UByte
	
	for i = 0 to 4 step 2
		SetBufferByte(i, number)
		SetBufferByte(i + 1, 0)
		number = number + 1
	next
	
	SetBkgData(GetBufferAddr(), x, y, 3, 1)
end sub

sub DrawEnemy(x as UByte, y as UByte)
	AddSprite(x, y, enemyBaseTile)
	AddSprite(x+8, y, enemyBaseTile + 2)
end sub

const enemyVDistance as UByte = 24
const enemyHDistance as UByte = 64
sub DrawEnemies()
	dim i, j, k as UInteger
	
	k = 0
	for i = 0 to (enemyVDistance * 2) step enemyVDistance
		for j = 0 to (enemyHDistance * 4) step enemyHDistance
			DrawEnemy(j + k, i)
		next
		k = k + (enemyHDistance >> 1)
	next
end sub

sub DrawBackground()
	dim i, j as UByte
	dim n, m as UByte
	
	n = 144
	for i = 4 to 12	
		m = n
		for j = 0 to 27 step 3
			if m >= 165 then
				m = 144
			end if
			
			DrawBlock(j, i, m)
			m = m + 3
		next
		
		n = n + 3
		if n >= 165 then
			n = 144
		end if
	next
end sub

ballSpdX = ballMaxSpd >> 1
ballSpdY = ballMaxSpd >> 1

LoadPalette(ResourceAddr(MManiaPal), 16, 0)
LoadPalette(ResourceAddr(MManiaPal), 16, 16)

LoadTiles(128, ResourceAddr(MManiaTil), 64, 4)

rem DrawBackground()

do
	' *** Player ***

	joy = ReadJoypad1()
	if AndW(joy, joyLeftMask) then
		padSpdX = padSpdX - padIncSpd
		if padSpdX < -padMaxSpd then
			padSpdX = -padMaxSpd
		end if		
		
	elseif AndW(joy, joyRightMask) then
		padSpdX = padSpdX + padIncSpd
		if padSpdX > padMaxSpd then
			padSpdX = padMaxSpd
		end if
		
	elseif 1 then 'else doesn't seem to be working correctly when used together with elsif...
		if padSpdX < 0 then
			padSpdX = -(-padSpdX >> 1)
		else
			padSpdX = padSpdX >> 1
		end if
	end if
	
	padX = padX + padSpdX
	
	if padX < 0 then
		padX = 0
	elseif padX > padMaxX then
		padX = padMaxX
	end if
	

	' *** Ball ***
	
	ballX = ballX + ballSpdX
	ballY = ballY + ballSpdY
	
	if ballX < 0 then
		ballX = 0
		ballSpdX = -ballSpdX
	elseif ballX > maxX then
		ballX = maxX
		ballSpdX = -ballSpdX
	end if
	
	if ballY < 0 then
		ballY = 0
		ballSpdY = -ballSpdY
	elseif ballY > maxY then
		ballY = maxY
		ballSpdY = -ballSpdY
	end if
	
	' *** Draw ***

	ResetSprites()	
	DrawPlayerShip()	
	AddSprite(ballX >> fixShift, ballY >> fixShift, 131)	
rem	DrawEnemy(0, 0)	
	DrawEnemies()
	
	WaitForVBlankNoInt()
	UpdateSprites()
loop