#include "test.zxi"

sub fastcall UpdateSprites()
	asm
		; Since it's a fastcall function, you can do that.
		jp UpdateSprites ; Jumps directly to the actual asm routine
	end asm
end sub

sub fastcall WaitForVBlankNoInt()
	asm
		; Since it's a fastcall function, you can do that.
		jp WaitForVBlankNoInt ; Jumps directly to the actual asm routine
	end asm
end sub

sub fastcall SetSprite(num as UByte, x as UByte, y as UByte, tile as UByte)
	asm
		exx
		pop hl ; ret addr
		exx 

		ld d, 0
		ld e, a		; de = num
		pop bc		; b = x
		
		ld hl, hw_sprites_y
		add hl, de
		pop af
		ld (hl), a	; hw_sprites_y[num] = y

		ld hl, hw_sprites_xc		
		add hl, de
		add hl, de
		ld (hl), b	; hw_sprites_xc[num << 1] = x
		
		inc hl
		pop af
		ld (hl), a	; hw_sprites_xc[(num << 1) + 1] = tile

		exx
		push hl ; stores ret addr back
		exx
	end asm
end sub

dim x as Integer
DIM a(1 TO 10) AS UBYTE

x = 3

if x > 2 then
	x = x + 1
end if

do
	for x = 0 to 128:
		SetSprite(0, x+1, x+2, x >> 2)
		WaitForVBlankNoInt()
		UpdateSprites()
	next	
loop